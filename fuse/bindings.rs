/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8
                <= self.storage.as_ref().len()
        );

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8
                <= self.storage.as_ref().len()
        );

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const FUSE_USE_VERSION: u32 = 35;
pub const FUSE_OPT_KEY_OPT: i32 = -1;
pub const FUSE_OPT_KEY_NONOPT: i32 = -2;
pub const FUSE_OPT_KEY_KEEP: i32 = -3;
pub const FUSE_OPT_KEY_DISCARD: i32 = -4;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 29;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const FUSE_MAJOR_VERSION: u32 = 3;
pub const FUSE_MINOR_VERSION: u32 = 2;
pub const FUSE_CAP_ASYNC_READ: u32 = 1;
pub const FUSE_CAP_POSIX_LOCKS: u32 = 2;
pub const FUSE_CAP_ATOMIC_O_TRUNC: u32 = 8;
pub const FUSE_CAP_EXPORT_SUPPORT: u32 = 16;
pub const FUSE_CAP_DONT_MASK: u32 = 64;
pub const FUSE_CAP_SPLICE_WRITE: u32 = 128;
pub const FUSE_CAP_SPLICE_MOVE: u32 = 256;
pub const FUSE_CAP_SPLICE_READ: u32 = 512;
pub const FUSE_CAP_FLOCK_LOCKS: u32 = 1024;
pub const FUSE_CAP_IOCTL_DIR: u32 = 2048;
pub const FUSE_CAP_AUTO_INVAL_DATA: u32 = 4096;
pub const FUSE_CAP_READDIRPLUS: u32 = 8192;
pub const FUSE_CAP_READDIRPLUS_AUTO: u32 = 16384;
pub const FUSE_CAP_ASYNC_DIO: u32 = 32768;
pub const FUSE_CAP_WRITEBACK_CACHE: u32 = 65536;
pub const FUSE_CAP_NO_OPEN_SUPPORT: u32 = 131072;
pub const FUSE_CAP_PARALLEL_DIROPS: u32 = 262144;
pub const FUSE_CAP_POSIX_ACL: u32 = 524288;
pub const FUSE_CAP_HANDLE_KILLPRIV: u32 = 1048576;
pub const FUSE_CAP_NO_OPENDIR_SUPPORT: u32 = 16777216;
pub const FUSE_IOCTL_COMPAT: u32 = 1;
pub const FUSE_IOCTL_UNRESTRICTED: u32 = 2;
pub const FUSE_IOCTL_RETRY: u32 = 4;
pub const FUSE_IOCTL_DIR: u32 = 16;
pub const FUSE_IOCTL_MAX_IOV: u32 = 256;
pub const _UTIME_H: u32 = 1;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _SYS_STAT_H: u32 = 1;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _MKNOD_VER: u32 = 0;
pub const _SYS_STATVFS_H: u32 = 1;
pub const _SYS_UIO_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const FUSE_ROOT_ID: u32 = 1;
pub const FUSE_SET_ATTR_MODE: u32 = 1;
pub const FUSE_SET_ATTR_UID: u32 = 2;
pub const FUSE_SET_ATTR_GID: u32 = 4;
pub const FUSE_SET_ATTR_SIZE: u32 = 8;
pub const FUSE_SET_ATTR_ATIME: u32 = 16;
pub const FUSE_SET_ATTR_MTIME: u32 = 32;
pub const FUSE_SET_ATTR_ATIME_NOW: u32 = 128;
pub const FUSE_SET_ATTR_MTIME_NOW: u32 = 256;
pub const FUSE_SET_ATTR_CTIME: u32 = 1024;
/// Option description
///
/// This structure describes a single option, and action associated
/// with it, in case it matches.
///
/// More than one such match may occur, in which case the action for
/// each match is executed.
///
/// There are three possible actions in case of a match:
///
/// i) An integer (int or unsigned) variable determined by 'offset' is
///    set to 'value'
///
/// ii) The processing function is called, with 'value' as the key
///
/// iii) An integer (any) or string (char *) variable determined by
///    'offset' is set to the value of an option parameter
///
/// 'offset' should normally be either set to
///
///  - 'offsetof(struct foo, member)'  actions i) and iii)
///
///  - -1			      action ii)
///
/// The 'offsetof()' macro is defined in the <stddef.h> header.
///
/// The template determines which options match, and also have an
/// effect on the action.  Normally the action is either i) or ii), but
/// if a format is present in the template, then action iii) is
/// performed.
///
/// The types of templates are:
///
/// 1) "-x", "-foo", "--foo", "--foo-bar", etc.	These match only
///   themselves.  Invalid values are "--" and anything beginning
///   with "-o"
///
/// 2) "foo", "foo-bar", etc.  These match "-ofoo", "-ofoo-bar" or
///    the relevant option in a comma separated option list
///
/// 3) "bar=", "--foo=", etc.  These are variations of 1) and 2)
///    which have a parameter
///
/// 4) "bar=%s", "--foo=%lu", etc.  Same matching as above but perform
///    action iii).
///
/// 5) "-x ", etc.  Matches either "-xparam" or "-x param" as
///    two separate arguments
///
/// 6) "-x %s", etc.  Combination of 4) and 5)
///
/// If the format is "%s", memory is allocated for the string unlike with
/// scanf().  The previous value (if non-NULL) stored at the this location is
/// freed.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_opt {
    /// Matching template and optional parameter formatting
    pub templ: *const ::std::os::raw::c_char,
    /// Offset of variable within 'data' parameter of fuse_opt_parse()
    /// or -1
    pub offset: ::std::os::raw::c_ulong,
    /// Value to set the variable to, or to be passed as 'key' to the
    /// processing function.	 Ignored if template has a format
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_opt() {
    assert_eq!(
        ::std::mem::size_of::<fuse_opt>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_opt>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_opt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_opt>())).templ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(templ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_opt>())).offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_opt>())).value as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(value)
        )
    );
}
/// Argument list
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_args {
    /// Argument count
    pub argc: ::std::os::raw::c_int,
    /// Argument vector.  NULL terminated
    pub argv: *mut *mut ::std::os::raw::c_char,
    /// Is 'argv' allocated?
    pub allocated: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_args() {
    assert_eq!(
        ::std::mem::size_of::<fuse_args>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_args))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_args>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_args>())).argc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_args>())).argv as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_args>())).allocated as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(allocated)
        )
    );
}
/// Processing function
///
/// This function is called if
///    - option did not match any 'struct fuse_opt'
///    - argument is a non-option
///    - option did match and offset was set to -1
///
/// The 'arg' parameter will always contain the whole argument or
/// option including the parameter if exists.  A two-argument option
/// ("-x foo") is always converted to single argument option of the
/// form "-xfoo" before this function is called.
///
/// Options of the form '-ofoo' are passed to this function without the
/// '-o' prefix.
///
/// The return value of this function determines whether this argument
/// is to be inserted into the output argument vector, or discarded.
///
/// @param data is the user data passed to the fuse_opt_parse() function
/// @param arg is the whole argument or option
/// @param key determines why the processing function was called
/// @param outargs the current output argument list
/// @return -1 on error, 0 if arg is to be discarded, 1 if arg should be kept
pub type fuse_opt_proc_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        arg: *const ::std::os::raw::c_char,
        key: ::std::os::raw::c_int,
        outargs: *mut fuse_args,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    /// Option parsing function
    ///
    /// If 'args' was returned from a previous call to fuse_opt_parse() or
    /// it was constructed from
    ///
    /// A NULL 'args' is equivalent to an empty argument vector
    ///
    /// A NULL 'opts' is equivalent to an 'opts' array containing a single
    /// end marker
    ///
    /// A NULL 'proc' is equivalent to a processing function always
    /// returning '1'
    ///
    /// @param args is the input and output argument list
    /// @param data is the user data
    /// @param opts is the option description array
    /// @param proc is the processing function
    /// @return -1 on error, 0 on success
    pub fn fuse_opt_parse(
        args: *mut fuse_args,
        data: *mut ::std::os::raw::c_void,
        opts: *const fuse_opt,
        proc_: fuse_opt_proc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Add an option to a comma separated option list
    ///
    /// @param opts is a pointer to an option list, may point to a NULL value
    /// @param opt is the option to add
    /// @return -1 on allocation error, 0 on success
    pub fn fuse_opt_add_opt(
        opts: *mut *mut ::std::os::raw::c_char,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Add an option, escaping commas, to a comma separated option list
    ///
    /// @param opts is a pointer to an option list, may point to a NULL value
    /// @param opt is the option to add
    /// @return -1 on allocation error, 0 on success
    pub fn fuse_opt_add_opt_escaped(
        opts: *mut *mut ::std::os::raw::c_char,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Add an argument to a NULL terminated argument vector
    ///
    /// @param args is the structure containing the current argument list
    /// @param arg is the new argument to add
    /// @return -1 on allocation error, 0 on success
    pub fn fuse_opt_add_arg(
        args: *mut fuse_args,
        arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Add an argument at the specified position in a NULL terminated
    /// argument vector
    ///
    /// Adds the argument to the N-th position.  This is useful for adding
    /// options at the beginning of the array which must not come after the
    /// special '--' option.
    ///
    /// @param args is the structure containing the current argument list
    /// @param pos is the position at which to add the argument
    /// @param arg is the new argument to add
    /// @return -1 on allocation error, 0 on success
    pub fn fuse_opt_insert_arg(
        args: *mut fuse_args,
        pos: ::std::os::raw::c_int,
        arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Free the contents of argument list
    ///
    /// The structure itself is not freed
    ///
    /// @param args is the structure containing the argument list
    pub fn fuse_opt_free_args(args: *mut fuse_args);
}
extern "C" {
    /// Check if an option matches
    ///
    /// @param opts is the option description array
    /// @param opt is the option to match
    /// @return 1 if a match is found, 0 if not
    pub fn fuse_opt_match(
        opts: *const fuse_opt,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1
                as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_internal_list>())).__prev
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_internal_list>())).__next
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . __low as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . __high as * const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) ) ) . __low as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) ) ) . __high as * const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>()))
                .__g1_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>()))
                .__g1_start32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
/// Information about an open file.
///
/// File Handles are created by the open, opendir, and create methods and closed
/// by the release and releasedir methods.  Multiple file handles may be
/// concurrently open for the same file.  Generally, a client will create one
/// file handle per file descriptor, though in some cases multiple file
/// descriptors can share a single file handle.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_file_info {
    /// Open flags.	 Available in open() and release()
    pub flags: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize], u32>,
    /// File handle id.  May be filled in by filesystem in create,
    /// open, and opendir().  Available in most other file operations on the
    /// same file handle.
    pub fh: u64,
    /// Lock owner id.  Available in locking operations and flush
    pub lock_owner: u64,
    /// Requested poll events.  Available in ->poll.  Only set on kernels
    ///which support it.  If unsupported, this field is set to zero.
    pub poll_events: u32,
}
#[test]
fn bindgen_test_layout_fuse_file_info() {
    assert_eq!(
        ::std::mem::size_of::<fuse_file_info>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_file_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_file_info>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_file_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_file_info>())).flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_file_info>())).fh as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_file_info>())).lock_owner as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(lock_owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_file_info>())).poll_events as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(poll_events)
        )
    );
}
impl fuse_file_info {
    #[inline]
    pub fn writepage(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_writepage(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_io(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_direct_io(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_cache(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_keep_cache(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flush(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_flush(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nonseekable(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_nonseekable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flock_release(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_flock_release(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cache_readdir(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_cache_readdir(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(32usize, 26u8) as u32)
        }
    }
    #[inline]
    pub fn set_padding(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        writepage: ::std::os::raw::c_uint,
        direct_io: ::std::os::raw::c_uint,
        keep_cache: ::std::os::raw::c_uint,
        flush: ::std::os::raw::c_uint,
        nonseekable: ::std::os::raw::c_uint,
        flock_release: ::std::os::raw::c_uint,
        cache_readdir: ::std::os::raw::c_uint,
        padding: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<
            [u8; 8usize],
            u32,
        > = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let writepage: u32 = unsafe { ::std::mem::transmute(writepage) };
            writepage as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let direct_io: u32 = unsafe { ::std::mem::transmute(direct_io) };
            direct_io as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let keep_cache: u32 = unsafe { ::std::mem::transmute(keep_cache) };
            keep_cache as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let flush: u32 = unsafe { ::std::mem::transmute(flush) };
            flush as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let nonseekable: u32 =
                unsafe { ::std::mem::transmute(nonseekable) };
            nonseekable as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let flock_release: u32 =
                unsafe { ::std::mem::transmute(flock_release) };
            flock_release as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cache_readdir: u32 =
                unsafe { ::std::mem::transmute(cache_readdir) };
            cache_readdir as u64
        });
        __bindgen_bitfield_unit.set(32usize, 26u8, {
            let padding: u32 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
/// Configuration parameters passed to fuse_session_loop_mt() and
/// fuse_loop_mt().
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_loop_config {
    /// whether to use separate device fds for each thread
    /// (may increase performance)
    pub clone_fd: ::std::os::raw::c_int,
    /// The maximum number of available worker threads before they
    /// start to get deleted when they become idle. If not
    /// specified, the default is 10.
    ///
    /// Adjusting this has performance implications; a very small number
    /// of threads in the pool will cause a lot of thread creation and
    /// deletion overhead and performance may suffer. When set to 0, a new
    /// thread will be created to service every operation.
    pub max_idle_threads: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_fuse_loop_config() {
    assert_eq!(
        ::std::mem::size_of::<fuse_loop_config>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_loop_config))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_loop_config>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_loop_config))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_loop_config>())).clone_fd as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_loop_config),
            "::",
            stringify!(clone_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_loop_config>())).max_idle_threads
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_loop_config),
            "::",
            stringify!(max_idle_threads)
        )
    );
}
/// Connection information, passed to the ->init() method
///
/// Some of the elements are read-write, these can be changed to
/// indicate the value requested by the filesystem.  The requested
/// value must usually be smaller than the indicated value.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_conn_info {
    /// Major version of the protocol (read-only)
    pub proto_major: ::std::os::raw::c_uint,
    /// Minor version of the protocol (read-only)
    pub proto_minor: ::std::os::raw::c_uint,
    /// Maximum size of the write buffer
    pub max_write: ::std::os::raw::c_uint,
    /// Maximum size of read requests. A value of zero indicates no
    /// limit. However, even if the filesystem does not specify a
    /// limit, the maximum size of read requests will still be
    /// limited by the kernel.
    ///
    /// NOTE: For the time being, the maximum size of read requests
    /// must be set both here *and* passed to fuse_session_new()
    /// using the ``-o max_read=<n>`` mount option. At some point
    /// in the future, specifying the mount option will no longer
    /// be necessary.
    pub max_read: ::std::os::raw::c_uint,
    /// Maximum readahead
    pub max_readahead: ::std::os::raw::c_uint,
    /// Capability flags that the kernel supports (read-only)
    pub capable: ::std::os::raw::c_uint,
    /// Capability flags that the filesystem wants to enable.
    ///
    /// libfuse attempts to initialize this field with
    /// reasonable default values before calling the init() handler.
    pub want: ::std::os::raw::c_uint,
    /// Maximum number of pending "background" requests. A
    /// background request is any type of request for which the
    /// total number is not limited by other means. As of kernel
    /// 4.8, only two types of requests fall into this category:
    ///
    ///   1. Read-ahead requests
    ///   2. Asynchronous direct I/O requests
    ///
    /// Read-ahead requests are generated (if max_readahead is
    /// non-zero) by the kernel to preemptively fill its caches
    /// when it anticipates that userspace will soon read more
    /// data.
    ///
    /// Asynchronous direct I/O requests are generated if
    /// FUSE_CAP_ASYNC_DIO is enabled and userspace submits a large
    /// direct I/O request. In this case the kernel will internally
    /// split it up into multiple smaller requests and submit them
    /// to the filesystem concurrently.
    ///
    /// Note that the following requests are *not* background
    /// requests: writeback requests (limited by the kernel's
    /// flusher algorithm), regular (i.e., synchronous and
    /// buffered) userspace read/write requests (limited to one per
    /// thread), asynchronous read requests (Linux's io_submit(2)
    /// call actually blocks, so these are also limited to one per
    /// thread).
    pub max_background: ::std::os::raw::c_uint,
    /// Kernel congestion threshold parameter. If the number of pending
    /// background requests exceeds this number, the FUSE kernel module will
    /// mark the filesystem as "congested". This instructs the kernel to
    /// expect that queued requests will take some time to complete, and to
    /// adjust its algorithms accordingly (e.g. by putting a waiting thread
    /// to sleep instead of using a busy-loop).
    pub congestion_threshold: ::std::os::raw::c_uint,
    /// When FUSE_CAP_WRITEBACK_CACHE is enabled, the kernel is responsible
    /// for updating mtime and ctime when write requests are received. The
    /// updated values are passed to the filesystem with setattr() requests.
    /// However, if the filesystem does not support the full resolution of
    /// the kernel timestamps (nanoseconds), the mtime and ctime values used
    /// by kernel and filesystem will differ (and result in an apparent
    /// change of times after a cache flush).
    ///
    /// To prevent this problem, this variable can be used to inform the
    /// kernel about the timestamp granularity supported by the file-system.
    /// The value should be power of 10.  The default is 1, i.e. full
    /// nano-second resolution. Filesystems supporting only second resolution
    /// should set this to 1000000000.
    pub time_gran: ::std::os::raw::c_uint,
    /// For future use.
    pub reserved: [::std::os::raw::c_uint; 22usize],
}
#[test]
fn bindgen_test_layout_fuse_conn_info() {
    assert_eq!(
        ::std::mem::size_of::<fuse_conn_info>(),
        128usize,
        concat!("Size of: ", stringify!(fuse_conn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_conn_info>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_conn_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).proto_major as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(proto_major)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).proto_minor as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(proto_minor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).max_write as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).max_read as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).max_readahead as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_readahead)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).capable as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(capable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).want as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(want)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).max_background
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).congestion_threshold
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(congestion_threshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).time_gran as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(time_gran)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).reserved as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(reserved)
        )
    );
}
/// Session
///
/// This provides hooks for processing requests, and exiting
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_pollhandle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_conn_info_opts {
    _unused: [u8; 0],
}
extern "C" {
    /// This function parses several command-line options that can be used
    /// to override elements of struct fuse_conn_info. The pointer returned
    /// by this function should be passed to the
    /// fuse_apply_conn_info_opts() method by the file system's init()
    /// handler.
    ///
    /// Before using this function, think twice if you really want these
    /// parameters to be adjustable from the command line. In most cases,
    /// they should be determined by the file system internally.
    ///
    /// The following options are recognized:
    ///
    ///   -o max_write=N         sets conn->max_write
    ///   -o max_readahead=N     sets conn->max_readahead
    ///   -o max_background=N    sets conn->max_background
    ///   -o congestion_threshold=N  sets conn->congestion_threshold
    ///   -o async_read          sets FUSE_CAP_ASYNC_READ in conn->want
    ///   -o sync_read           unsets FUSE_CAP_ASYNC_READ in conn->want
    ///   -o atomic_o_trunc      sets FUSE_CAP_ATOMIC_O_TRUNC in conn->want
    ///   -o no_remote_lock      Equivalent to -o
    /// no_remote_flock,no_remote_posix_lock   -o no_remote_flock
    /// Unsets FUSE_CAP_FLOCK_LOCKS in
    /// conn->want   -o no_remote_posix_lock  Unsets FUSE_CAP_POSIX_LOCKS
    /// in conn->want   -o [no_]splice_write     (un-)sets
    /// FUSE_CAP_SPLICE_WRITE in conn->want   -o [no_]splice_move
    /// (un-)sets FUSE_CAP_SPLICE_MOVE
    /// in conn->want   -o [no_]splice_read      (un-)sets
    /// FUSE_CAP_SPLICE_READ in conn->want   -o [no_]auto_inval_data
    /// (un-)sets FUSE_CAP_AUTO_INVAL_DATA
    /// in conn->want   -o readdirplus=no        unsets
    /// FUSE_CAP_READDIRPLUS in conn->want   -o readdirplus=yes       sets
    /// FUSE_CAP_READDIRPLUS and unsets                            
    /// FUSE_CAP_READDIRPLUS_AUTO in
    /// conn->want   -o readdirplus=auto      sets FUSE_CAP_READDIRPLUS and
    ///                            FUSE_CAP_READDIRPLUS_AUTO in conn->want
    ///   -o [no_]async_dio        (un-)sets FUSE_CAP_ASYNC_DIO in conn->want
    ///   -o [no_]writeback_cache  (un-)sets FUSE_CAP_WRITEBACK_CACHE in
    /// conn->want   -o time_gran=N           sets conn->time_gran
    ///
    /// Known options will be removed from *args*, unknown options will be
    /// passed through unchanged.
    ///
    /// @param args argument vector (input+output)
    /// @return parsed options
    pub fn fuse_parse_conn_info_opts(
        args: *mut fuse_args,
    ) -> *mut fuse_conn_info_opts;
}
extern "C" {
    /// This function applies the (parsed) parameters in *opts* to the
    /// *conn* pointer. It may modify the following fields: wants,
    /// max_write, max_readahead, congestion_threshold, max_background,
    /// time_gran. A field is only set (or unset) if the corresponding
    /// option has been explicitly set.
    pub fn fuse_apply_conn_info_opts(
        opts: *mut fuse_conn_info_opts,
        conn: *mut fuse_conn_info,
    );
}
extern "C" {
    /// Go into the background
    ///
    /// @param foreground if true, stay in the foreground
    /// @return 0 on success, -1 on failure
    pub fn fuse_daemonize(
        foreground: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Get the version of the library
    ///
    /// @return the version
    pub fn fuse_version() -> ::std::os::raw::c_int;
}
extern "C" {
    /// Get the full package version string of the library
    ///
    /// @return the package version
    pub fn fuse_pkgversion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// Destroy poll handle
    ///
    /// @param ph the poll handle
    pub fn fuse_pollhandle_destroy(ph: *mut fuse_pollhandle);
}
/// Buffer contains a file descriptor
///
/// If this flag is set, the .fd field is valid, otherwise the
/// .mem fields is valid.
pub const fuse_buf_flags_FUSE_BUF_IS_FD: fuse_buf_flags = 2;
/// Seek on the file descriptor
///
/// If this flag is set then the .pos field is valid and is
/// used to seek to the given offset before performing
/// operation on file descriptor.
pub const fuse_buf_flags_FUSE_BUF_FD_SEEK: fuse_buf_flags = 4;
/// Retry operation on file descriptor
///
/// If this flag is set then retry operation on file descriptor
/// until .size bytes have been copied or an error or EOF is
/// detected.
pub const fuse_buf_flags_FUSE_BUF_FD_RETRY: fuse_buf_flags = 8;
/// Buffer flags
pub type fuse_buf_flags = u32;
/// Don't use splice(2)
///
/// Always fall back to using read and write instead of
/// splice(2) to copy data from one file descriptor to another.
///
/// If this flag is not set, then only fall back if splice is
/// unavailable.
pub const fuse_buf_copy_flags_FUSE_BUF_NO_SPLICE: fuse_buf_copy_flags = 2;
/// Force splice
///
/// Always use splice(2) to copy data from one file descriptor
/// to another.  If splice is not available, return -EINVAL.
pub const fuse_buf_copy_flags_FUSE_BUF_FORCE_SPLICE: fuse_buf_copy_flags = 4;
/// Try to move data with splice.
///
/// If splice is used, try to move pages from the source to the
/// destination instead of copying.  See documentation of
/// SPLICE_F_MOVE in splice(2) man page.
pub const fuse_buf_copy_flags_FUSE_BUF_SPLICE_MOVE: fuse_buf_copy_flags = 8;
/// Don't block on the pipe when copying data with splice
///
/// Makes the operations on the pipe non-blocking (if the pipe
/// is full or empty).  See SPLICE_F_NONBLOCK in the splice(2)
/// man page.
pub const fuse_buf_copy_flags_FUSE_BUF_SPLICE_NONBLOCK: fuse_buf_copy_flags =
    16;
/// Buffer copy flags
pub type fuse_buf_copy_flags = u32;
/// Single data buffer
///
/// Generic data buffer for I/O, extended attributes, etc...  Data may
/// be supplied as a memory pointer or as a file descriptor
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_buf {
    /// Size of data in bytes
    pub size: usize,
    /// Buffer flags
    pub flags: fuse_buf_flags,
    /// Memory pointer
    ///
    /// Used unless FUSE_BUF_IS_FD flag is set.
    pub mem: *mut ::std::os::raw::c_void,
    /// File descriptor
    ///
    /// Used if FUSE_BUF_IS_FD flag is set.
    pub fd: ::std::os::raw::c_int,
    /// File position
    ///
    /// Used if FUSE_BUF_FD_SEEK flag is set.
    pub pos: off_t,
}
#[test]
fn bindgen_test_layout_fuse_buf() {
    assert_eq!(
        ::std::mem::size_of::<fuse_buf>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_buf))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_buf>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_buf>())).flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_buf>())).mem as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).fd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_buf>())).pos as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(pos)
        )
    );
}
/// Data buffer vector
///
/// An array of data buffers, each containing a memory pointer or a
/// file descriptor.
///
/// Allocate dynamically to add more than one buffer.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_bufvec {
    /// Number of buffers in the array
    pub count: usize,
    /// Index of current buffer within the array
    pub idx: usize,
    /// Current offset within the current buffer
    pub off: usize,
    /// Array of buffers
    pub buf: [fuse_buf; 1usize],
}
#[test]
fn bindgen_test_layout_fuse_bufvec() {
    assert_eq!(
        ::std::mem::size_of::<fuse_bufvec>(),
        64usize,
        concat!("Size of: ", stringify!(fuse_bufvec))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_bufvec>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_bufvec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_bufvec>())).count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_bufvec>())).idx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_bufvec>())).off as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_bufvec>())).buf as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(buf)
        )
    );
}
extern "C" {
    /// Get total size of data in a fuse buffer vector
    ///
    /// @param bufv buffer vector
    /// @return size of data
    pub fn fuse_buf_size(bufv: *const fuse_bufvec) -> usize;
}
extern "C" {
    /// Copy data from one buffer vector to another
    ///
    /// @param dst destination buffer vector
    /// @param src source buffer vector
    /// @param flags flags controlling the copy
    /// @return actual number of bytes copied or -errno on error
    pub fn fuse_buf_copy(
        dst: *mut fuse_bufvec,
        src: *mut fuse_bufvec,
        flags: fuse_buf_copy_flags,
    ) -> isize;
}
extern "C" {
    /// Exit session on HUP, TERM and INT signals and ignore PIPE signal
    ///
    /// Stores session in a global variable.	 May only be called once per
    /// process until fuse_remove_signal_handlers() is called.
    ///
    /// Once either of the POSIX signals arrives, the signal handler calls
    /// fuse_session_exit().
    ///
    /// @param se the session to exit
    /// @return 0 on success, -1 on failure
    ///
    /// See also:
    /// fuse_remove_signal_handlers()
    pub fn fuse_set_signal_handlers(
        se: *mut fuse_session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Restore default signal handlers
    ///
    /// Resets global session.  After this fuse_set_signal_handlers() may
    /// be called again.
    ///
    /// @param se the same session as given in fuse_set_signal_handlers()
    ///
    /// See also:
    /// fuse_set_signal_handlers()
    pub fn fuse_remove_signal_handlers(se: *mut fuse_session);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fuse_off_t_must_be_64bit_dummy_struct {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout__fuse_off_t_must_be_64bit_dummy_struct() {
    assert_eq!(
        ::std::mem::size_of::<_fuse_off_t_must_be_64bit_dummy_struct>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_fuse_off_t_must_be_64bit_dummy_struct)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_fuse_off_t_must_be_64bit_dummy_struct>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_fuse_off_t_must_be_64bit_dummy_struct)
        )
    );
}
impl _fuse_off_t_must_be_64bit_dummy_struct {
    #[inline]
    pub fn _fuse_off_t_must_be_64bit(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set__fuse_off_t_must_be_64bit(
        &mut self,
        val: ::std::os::raw::c_uint,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _fuse_off_t_must_be_64bit: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<
            [u8; 1usize],
            u8,
        > = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let _fuse_off_t_must_be_64bit: u32 =
                unsafe { ::std::mem::transmute(_fuse_off_t_must_be_64bit) };
            _fuse_off_t_must_be_64bit as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: __time_t,
    pub modtime: __time_t,
}
#[test]
fn bindgen_test_layout_utimbuf() {
    assert_eq!(
        ::std::mem::size_of::<utimbuf>(),
        16usize,
        concat!("Size of: ", stringify!(utimbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<utimbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(utimbuf))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<utimbuf>())).actime as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(actime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<utimbuf>())).modtime as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(modtime)
        )
    );
}
extern "C" {
    pub fn utime(
        __file: *const ::std::os::raw::c_char,
        __file_times: *const utimbuf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(
        __file: *const ::std::os::raw::c_char,
        __mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(
        __fd: ::std::os::raw::c_int,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(
        __fd: ::std::os::raw::c_int,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(
        __fd: ::std::os::raw::c_int,
        __times: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(
        __ver: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(
        __ver: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statvfs {
    pub f_bsize: ::std::os::raw::c_ulong,
    pub f_frsize: ::std::os::raw::c_ulong,
    pub f_blocks: __fsblkcnt_t,
    pub f_bfree: __fsblkcnt_t,
    pub f_bavail: __fsblkcnt_t,
    pub f_files: __fsfilcnt_t,
    pub f_ffree: __fsfilcnt_t,
    pub f_favail: __fsfilcnt_t,
    pub f_fsid: ::std::os::raw::c_ulong,
    pub f_flag: ::std::os::raw::c_ulong,
    pub f_namemax: ::std::os::raw::c_ulong,
    pub __f_spare: [::std::os::raw::c_int; 6usize],
}
#[test]
fn bindgen_test_layout_statvfs() {
    assert_eq!(
        ::std::mem::size_of::<statvfs>(),
        112usize,
        concat!("Size of: ", stringify!(statvfs))
    );
    assert_eq!(
        ::std::mem::align_of::<statvfs>(),
        8usize,
        concat!("Alignment of ", stringify!(statvfs))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_bsize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_frsize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_frsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_blocks as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_bfree as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bfree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_bavail as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bavail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_files as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_ffree as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_ffree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_favail as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_favail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_fsid as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_fsid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_flag as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).f_namemax as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_namemax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<statvfs>())).__f_spare as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(__f_spare)
        )
    );
}
pub const ST_RDONLY: _bindgen_ty_1 = 1;
pub const ST_NOSUID: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = u32;
extern "C" {
    pub fn statvfs(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatvfs(
        __fildes: ::std::os::raw::c_int,
        __buf: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
/// Inode number type
pub type fuse_ino_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_req {
    _unused: [u8; 0],
}
/// Request pointer type
pub type fuse_req_t = *mut fuse_req;
/// Directory entry parameters supplied to fuse_reply_entry()
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_entry_param {
    /// Unique inode number
    ///
    /// In lookup, zero means negative entry (from version 2.5)
    /// Returning ENOENT also means negative entry, but by setting zero
    /// ino the kernel may cache negative entries for entry_timeout
    /// seconds.
    pub ino: fuse_ino_t,
    /// Generation number for this entry.
    ///
    /// If the file system will be exported over NFS, the
    /// ino/generation pairs need to be unique over the file
    /// system's lifetime (rather than just the mount time). So if
    /// the file system reuses an inode after it has been deleted,
    /// it must assign a new, previously unused generation number
    /// to the inode at the same time.
    ///
    pub generation: u64,
    /// Inode attributes.
    ///
    /// Even if attr_timeout == 0, attr must be correct. For example,
    /// for open(), FUSE uses attr.st_size from lookup() to determine
    /// how many bytes to request. If this value is not correct,
    /// incorrect data will be returned.
    pub attr: stat,
    /// Validity timeout (in seconds) for inode attributes. If
    ///attributes only change as a result of requests that come
    ///through the kernel, this should be set to a very large
    ///value.
    pub attr_timeout: f64,
    /// Validity timeout (in seconds) for the name. If directory
    ///entries are changed/deleted only as a result of requests
    ///that come through the kernel, this should be set to a very
    ///large value.
    pub entry_timeout: f64,
}
#[test]
fn bindgen_test_layout_fuse_entry_param() {
    assert_eq!(
        ::std::mem::size_of::<fuse_entry_param>(),
        176usize,
        concat!("Size of: ", stringify!(fuse_entry_param))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_entry_param>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_entry_param))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_entry_param>())).ino as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_param),
            "::",
            stringify!(ino)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_entry_param>())).generation as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_param),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_entry_param>())).attr as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_param),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_entry_param>())).attr_timeout
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_param),
            "::",
            stringify!(attr_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_entry_param>())).entry_timeout
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_param),
            "::",
            stringify!(entry_timeout)
        )
    );
}
/// Additional context associated with requests.
///
/// Note that the reported client uid, gid and pid may be zero in some
/// situations. For example, if the FUSE file system is running in a
/// PID or user namespace but then accessed from outside the namespace,
/// there is no valid uid/pid/gid that could be reported.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_ctx {
    /// User ID of the calling process
    pub uid: uid_t,
    /// Group ID of the calling process
    pub gid: gid_t,
    /// Thread ID of the calling process
    pub pid: pid_t,
    /// Umask of the calling process
    pub umask: mode_t,
}
#[test]
fn bindgen_test_layout_fuse_ctx() {
    assert_eq!(
        ::std::mem::size_of::<fuse_ctx>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_ctx>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_ctx))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_ctx>())).uid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ctx),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_ctx>())).gid as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ctx),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_ctx>())).pid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ctx),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_ctx>())).umask as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ctx),
            "::",
            stringify!(umask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_forget_data {
    pub ino: fuse_ino_t,
    pub nlookup: u64,
}
#[test]
fn bindgen_test_layout_fuse_forget_data() {
    assert_eq!(
        ::std::mem::size_of::<fuse_forget_data>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_forget_data))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_forget_data>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_forget_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_forget_data>())).ino as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_forget_data),
            "::",
            stringify!(ino)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_forget_data>())).nlookup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_forget_data),
            "::",
            stringify!(nlookup)
        )
    );
}
/// Low level filesystem operations
///
/// Most of the methods (with the exception of init and destroy)
/// receive a request handle (fuse_req_t) as their first argument.
/// This handle must be passed to one of the specified reply functions.
///
/// This may be done inside the method invocation, or after the call
/// has returned.  The request handle is valid until one of the reply
/// functions is called.
///
/// Other pointer arguments (name, fuse_file_info, etc) are not valid
/// after the call has returned, so if they are needed later, their
/// contents have to be copied.
///
/// In general, all methods are expected to perform any necessary
/// permission checking. However, a filesystem may delegate this task
/// to the kernel by passing the `default_permissions` mount option to
/// `fuse_session_new()`. In this case, methods will only be called if
/// the kernel's permission check has succeeded.
///
/// The filesystem sometimes needs to handle a return value of -ENOENT
/// from the reply function, which means, that the request was
/// interrupted, and the reply discarded.  For example if
/// fuse_reply_open() return -ENOENT means, that the release method for
/// this file will not be called.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_lowlevel_ops {
    /// Initialize filesystem
    ///
    /// This function is called when libfuse establishes
    /// communication with the FUSE kernel module. The file system
    /// should use this module to inspect and/or modify the
    /// connection parameters provided in the `conn` structure.
    ///
    /// Note that some parameters may be overwritten by options
    /// passed to fuse_session_new() which take precedence over the
    /// values set in this handler.
    ///
    /// There's no reply to this function
    ///
    /// @param userdata the user data passed to fuse_session_new()
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            conn: *mut fuse_conn_info,
        ),
    >,
    /// Clean up filesystem.
    ///
    /// Called on filesystem exit. When this method is called, the
    /// connection to the kernel may be gone already, so that eg. calls
    /// to fuse_lowlevel_notify_* will fail.
    ///
    /// There's no reply to this function
    ///
    /// @param userdata the user data passed to fuse_session_new()
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void),
    >,
    /// Look up a directory entry by name and get its attributes.
    ///
    /// Valid replies:
    ///   fuse_reply_entry
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param parent inode number of the parent directory
    /// @param name the name to look up
    pub lookup: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            parent: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
        ),
    >,
    /// Forget about an inode
    ///
    /// This function is called when the kernel removes an inode
    /// from its internal caches.
    ///
    /// The inode's lookup count increases by one for every call to
    /// fuse_reply_entry and fuse_reply_create. The nlookup parameter
    /// indicates by how much the lookup count should be decreased.
    ///
    /// Inodes with a non-zero lookup count may receive request from
    /// the kernel even after calls to unlink, rmdir or (when
    /// overwriting an existing file) rename. Filesystems must handle
    /// such requests properly and it is recommended to defer removal
    /// of the inode until the lookup count reaches zero. Calls to
    /// unlink, rmdir or rename will be followed closely by forget
    /// unless the file or directory is open, in which case the
    /// kernel issues forget only after the release or releasedir
    /// calls.
    ///
    /// Note that if a file system will be exported over NFS the
    /// inodes lifetime must extend even beyond forget. See the
    /// generation field in struct fuse_entry_param above.
    ///
    /// On unmount the lookup count for all inodes implicitly drops
    /// to zero. It is not guaranteed that the file system will
    /// receive corresponding forget messages for the affected
    /// inodes.
    ///
    /// Valid replies:
    ///   fuse_reply_none
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param nlookup the number of lookups to forget
    pub forget: ::std::option::Option<
        unsafe extern "C" fn(req: fuse_req_t, ino: fuse_ino_t, nlookup: u64),
    >,
    /// Get file attributes.
    ///
    /// If writeback caching is enabled, the kernel may have a
    /// better idea of a file's length than the FUSE file system
    /// (eg if there has been a write that extended the file size,
    /// but that has not yet been passed to the filesystem.n
    ///
    /// In this case, the st_size value provided by the file system
    /// will be ignored.
    ///
    /// Valid replies:
    ///   fuse_reply_attr
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi for future use, currently always NULL
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Set file attributes
    ///
    /// In the 'attr' argument only members indicated by the 'to_set'
    /// bitmask contain valid values.  Other members contain undefined
    /// values.
    ///
    /// Unless FUSE_CAP_HANDLE_KILLPRIV is disabled, this method is
    /// expected to reset the setuid and setgid bits if the file
    /// size or owner is being changed.
    ///
    /// If the setattr was invoked from the ftruncate() system call
    /// under Linux kernel versions 2.6.15 or later, the fi->fh will
    /// contain the value set by the open method or will be undefined
    /// if the open method didn't set any value.  Otherwise (not
    /// ftruncate call, or kernel version earlier than 2.6.15) the fi
    /// parameter will be NULL.
    ///
    /// Valid replies:
    ///   fuse_reply_attr
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param attr the attributes
    /// @param to_set bit mask of attributes which should be set
    /// @param fi file information, or NULL
    pub setattr: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            attr: *mut stat,
            to_set: ::std::os::raw::c_int,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Read symbolic link
    ///
    /// Valid replies:
    ///   fuse_reply_readlink
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(req: fuse_req_t, ino: fuse_ino_t),
    >,
    /// Create file node
    ///
    /// Create a regular file, character device, block device, fifo or
    /// socket node.
    ///
    /// Valid replies:
    ///   fuse_reply_entry
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param parent inode number of the parent directory
    /// @param name to create
    /// @param mode file type and mode with which to create the new file
    /// @param rdev the device number (only valid if created file is a device)
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            parent: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
            mode: mode_t,
            rdev: dev_t,
        ),
    >,
    /// Create a directory
    ///
    /// Valid replies:
    ///   fuse_reply_entry
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param parent inode number of the parent directory
    /// @param name to create
    /// @param mode with which to create the new file
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            parent: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
            mode: mode_t,
        ),
    >,
    /// Remove a file
    ///
    /// If the file's inode's lookup count is non-zero, the file
    /// system is expected to postpone any removal of the inode
    /// until the lookup count reaches zero (see description of the
    /// forget function).
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param parent inode number of the parent directory
    /// @param name to remove
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            parent: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
        ),
    >,
    /// Remove a directory
    ///
    /// If the directory's inode's lookup count is non-zero, the
    /// file system is expected to postpone any removal of the
    /// inode until the lookup count reaches zero (see description
    /// of the forget function).
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param parent inode number of the parent directory
    /// @param name to remove
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            parent: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
        ),
    >,
    /// Create a symbolic link
    ///
    /// Valid replies:
    ///   fuse_reply_entry
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param link the contents of the symbolic link
    /// @param parent inode number of the parent directory
    /// @param name to create
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            link: *const ::std::os::raw::c_char,
            parent: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
        ),
    >,
    /// Rename a file
    ///
    /// If the target exists it should be atomically replaced. If
    /// the target's inode's lookup count is non-zero, the file
    /// system is expected to postpone any removal of the inode
    /// until the lookup count reaches zero (see description of the
    /// forget function).
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent failure with error code EINVAL, i.e. all
    /// future bmap requests will fail with EINVAL without being
    /// send to the filesystem process.
    ///
    /// *flags* may be `RENAME_EXCHANGE` or `RENAME_NOREPLACE`. If
    /// RENAME_NOREPLACE is specified, the filesystem must not
    /// overwrite *newname* if it exists and return an error
    /// instead. If `RENAME_EXCHANGE` is specified, the filesystem
    /// must atomically exchange the two files, i.e. both must
    /// exist and neither may be deleted.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param parent inode number of the old parent directory
    /// @param name old name
    /// @param newparent inode number of the new parent directory
    /// @param newname new name
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            parent: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
            newparent: fuse_ino_t,
            newname: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_uint,
        ),
    >,
    /// Create a hard link
    ///
    /// Valid replies:
    ///   fuse_reply_entry
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the old inode number
    /// @param newparent inode number of the new parent directory
    /// @param newname new name to create
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            newparent: fuse_ino_t,
            newname: *const ::std::os::raw::c_char,
        ),
    >,
    /// Open a file
    ///
    /// Open flags are available in fi->flags. The following rules
    /// apply.
    ///
    ///  - Creation (O_CREAT, O_EXCL, O_NOCTTY) flags will be
    ///    filtered out / handled by the kernel.
    ///
    ///  - Access modes (O_RDONLY, O_WRONLY, O_RDWR) should be used
    ///    by the filesystem to check if the operation is
    ///    permitted.  If the ``-o default_permissions`` mount
    ///    option is given, this check is already done by the
    ///    kernel before calling open() and may thus be omitted by
    ///    the filesystem.
    ///
    ///  - When writeback caching is enabled, the kernel may send
    ///    read requests even for files opened with O_WRONLY. The
    ///    filesystem should be prepared to handle this.
    ///
    ///  - When writeback caching is disabled, the filesystem is
    ///    expected to properly handle the O_APPEND flag and ensure
    ///    that each write is appending to the end of the file.
    ///
    ///  - When writeback caching is enabled, the kernel will
    ///    handle O_APPEND. However, unless all changes to the file
    ///    come through the kernel this will not work reliably. The
    ///    filesystem should thus either ignore the O_APPEND flag
    ///    (and let the kernel handle it), or return an error
    ///    (indicating that reliably O_APPEND is not available).
    ///
    /// Filesystem may store an arbitrary file handle (pointer,
    /// index, etc) in fi->fh, and use this in other all other file
    /// operations (read, write, flush, release, fsync).
    ///
    /// Filesystem may also implement stateless file I/O and not store
    /// anything in fi->fh.
    ///
    /// There are also some flags (direct_io, keep_cache) which the
    /// filesystem may set in fi, to change the way the file is opened.
    /// See fuse_file_info structure in <fuse_common.h> for more details.
    ///
    /// If this request is answered with an error code of ENOSYS
    /// and FUSE_CAP_NO_OPEN_SUPPORT is set in
    /// `fuse_conn_info.capable`, this is treated as success and
    /// future calls to open and release will also succeed without being
    /// sent to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_open
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Read data
    ///
    /// Read should send exactly the number of bytes requested except
    /// on EOF or error, otherwise the rest of the data will be
    /// substituted with zeroes.  An exception to this is when the file
    /// has been opened in 'direct_io' mode, in which case the return
    /// value of the read system call will reflect the return value of
    /// this operation.
    ///
    /// fi->fh will contain the value set by the open method, or will
    /// be undefined if the open method didn't set any value.
    ///
    /// Valid replies:
    ///   fuse_reply_buf
    ///   fuse_reply_iov
    ///   fuse_reply_data
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param size number of bytes to read
    /// @param off offset to read from
    /// @param fi file information
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            size: usize,
            off: off_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Write data
    ///
    /// Write should return exactly the number of bytes requested
    /// except on error.  An exception to this is when the file has
    /// been opened in 'direct_io' mode, in which case the return value
    /// of the write system call will reflect the return value of this
    /// operation.
    ///
    /// Unless FUSE_CAP_HANDLE_KILLPRIV is disabled, this method is
    /// expected to reset the setuid and setgid bits.
    ///
    /// fi->fh will contain the value set by the open method, or will
    /// be undefined if the open method didn't set any value.
    ///
    /// Valid replies:
    ///   fuse_reply_write
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param buf data to write
    /// @param size number of bytes to write
    /// @param off offset to write to
    /// @param fi file information
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            buf: *const ::std::os::raw::c_char,
            size: usize,
            off: off_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Flush method
    ///
    /// This is called on each close() of the opened file.
    ///
    /// Since file descriptors can be duplicated (dup, dup2, fork), for
    /// one open call there may be many flush calls.
    ///
    /// Filesystems shouldn't assume that flush will always be called
    /// after some writes, or that if will be called at all.
    ///
    /// fi->fh will contain the value set by the open method, or will
    /// be undefined if the open method didn't set any value.
    ///
    /// NOTE: the name of the method is misleading, since (unlike
    /// fsync) the filesystem is not forced to flush pending writes.
    /// One reason to flush data is if the filesystem wants to return
    /// write errors during close.  However, such use is non-portable
    /// because POSIX does not require [close] to wait for delayed I/O to
    /// complete.
    ///
    /// If the filesystem supports file locking operations (setlk,
    /// getlk) it should remove all locks belonging to 'fi->owner'.
    ///
    /// If this request is answered with an error code of ENOSYS,
    /// this is treated as success and future calls to flush() will
    /// succeed automatically without being send to the filesystem
    /// process.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    ///
    /// [close]: http://pubs.opengroup.org/onlinepubs/9699919799/functions/close.html
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Release an open file
    ///
    /// Release is called when there are no more references to an open
    /// file: all file descriptors are closed and all memory mappings
    /// are unmapped.
    ///
    /// For every open call there will be exactly one release call (unless
    /// the filesystem is force-unmounted).
    ///
    /// The filesystem may reply with an error, but error values are
    /// not returned to close() or munmap() which triggered the
    /// release.
    ///
    /// fi->fh will contain the value set by the open method, or will
    /// be undefined if the open method didn't set any value.
    /// fi->flags will contain the same flags as for open.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Synchronize file contents
    ///
    /// If the datasync parameter is non-zero, then only the user data
    /// should be flushed, not the meta data.
    ///
    /// If this request is answered with an error code of ENOSYS,
    /// this is treated as success and future calls to fsync() will
    /// succeed automatically without being send to the filesystem
    /// process.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param datasync flag indicating if only data should be flushed
    /// @param fi file information
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            datasync: ::std::os::raw::c_int,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Open a directory
    ///
    /// Filesystem may store an arbitrary file handle (pointer, index,
    /// etc) in fi->fh, and use this in other all other directory
    /// stream operations (readdir, releasedir, fsyncdir).
    ///
    /// If this request is answered with an error code of ENOSYS and
    /// FUSE_CAP_NO_OPENDIR_SUPPORT is set in `fuse_conn_info.capable`,
    /// this is treated as success and future calls to opendir and
    /// releasedir will also succeed without being sent to the filesystem
    /// process. In addition, the kernel will cache readdir results
    /// as if opendir returned FOPEN_KEEP_CACHE | FOPEN_CACHE_DIR.
    ///
    /// Valid replies:
    ///   fuse_reply_open
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    pub opendir: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Read directory
    ///
    /// Send a buffer filled using fuse_add_direntry(), with size not
    /// exceeding the requested size.  Send an empty buffer on end of
    /// stream.
    ///
    /// fi->fh will contain the value set by the opendir method, or
    /// will be undefined if the opendir method didn't set any value.
    ///
    /// Returning a directory entry from readdir() does not affect
    /// its lookup count.
    ///
    /// If off_t is non-zero, then it will correspond to one of the off_t
    /// values that was previously returned by readdir() for the same
    /// directory handle. In this case, readdir() should skip over entries
    /// coming before the position defined by the off_t value. If entries
    /// are added or removed while the directory handle is open, they
    /// filesystem may still include the entries that have been removed,
    /// and may not report the entries that have been created. However,
    /// addition or removal of entries must never cause readdir() to skip
    /// over unrelated entries or to report them more than once. This means
    /// that off_t can not be a simple index that enumerates the entries
    /// that have been returned but must contain sufficient information to
    /// uniquely determine the next directory entry to return even when the
    /// set of entries is changing.
    ///
    /// The function does not have to report the '.' and '..'
    /// entries, but is allowed to do so. Note that, if readdir does
    /// not return '.' or '..', they will not be implicitly returned,
    /// and this behavior is observable by the caller.
    ///
    /// Valid replies:
    ///   fuse_reply_buf
    ///   fuse_reply_data
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param size maximum number of bytes to send
    /// @param off offset to continue reading the directory stream
    /// @param fi file information
    pub readdir: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            size: usize,
            off: off_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Release an open directory
    ///
    /// For every opendir call there will be exactly one releasedir
    /// call (unless the filesystem is force-unmounted).
    ///
    /// fi->fh will contain the value set by the opendir method, or
    /// will be undefined if the opendir method didn't set any value.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    pub releasedir: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Synchronize directory contents
    ///
    /// If the datasync parameter is non-zero, then only the directory
    /// contents should be flushed, not the meta data.
    ///
    /// fi->fh will contain the value set by the opendir method, or
    /// will be undefined if the opendir method didn't set any value.
    ///
    /// If this request is answered with an error code of ENOSYS,
    /// this is treated as success and future calls to fsyncdir() will
    /// succeed automatically without being send to the filesystem
    /// process.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param datasync flag indicating if only data should be flushed
    /// @param fi file information
    pub fsyncdir: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            datasync: ::std::os::raw::c_int,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Get file system statistics
    ///
    /// Valid replies:
    ///   fuse_reply_statfs
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number, zero means "undefined"
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(req: fuse_req_t, ino: fuse_ino_t),
    >,
    /// Set an extended attribute
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent failure with error code EOPNOTSUPP, i.e. all
    /// future setxattr() requests will fail with EOPNOTSUPP without being
    /// send to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    pub setxattr: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
            size: usize,
            flags: ::std::os::raw::c_int,
        ),
    >,
    /// Get an extended attribute
    ///
    /// If size is zero, the size of the value should be sent with
    /// fuse_reply_xattr.
    ///
    /// If the size is non-zero, and the value fits in the buffer, the
    /// value should be sent with fuse_reply_buf.
    ///
    /// If the size is too small for the value, the ERANGE error should
    /// be sent.
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent failure with error code EOPNOTSUPP, i.e. all
    /// future getxattr() requests will fail with EOPNOTSUPP without being
    /// send to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_buf
    ///   fuse_reply_data
    ///   fuse_reply_xattr
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param name of the extended attribute
    /// @param size maximum size of the value to send
    pub getxattr: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
            size: usize,
        ),
    >,
    /// List extended attribute names
    ///
    /// If size is zero, the total size of the attribute list should be
    /// sent with fuse_reply_xattr.
    ///
    /// If the size is non-zero, and the null character separated
    /// attribute list fits in the buffer, the list should be sent with
    /// fuse_reply_buf.
    ///
    /// If the size is too small for the list, the ERANGE error should
    /// be sent.
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent failure with error code EOPNOTSUPP, i.e. all
    /// future listxattr() requests will fail with EOPNOTSUPP without being
    /// send to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_buf
    ///   fuse_reply_data
    ///   fuse_reply_xattr
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param size maximum size of the list to send
    pub listxattr: ::std::option::Option<
        unsafe extern "C" fn(req: fuse_req_t, ino: fuse_ino_t, size: usize),
    >,
    /// Remove an extended attribute
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent failure with error code EOPNOTSUPP, i.e. all
    /// future removexattr() requests will fail with EOPNOTSUPP without being
    /// send to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param name of the extended attribute
    pub removexattr: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
        ),
    >,
    /// Check file access permissions
    ///
    /// This will be called for the access() and chdir() system
    /// calls.  If the 'default_permissions' mount option is given,
    /// this method is not called.
    ///
    /// This method is not called under Linux kernel versions 2.4.x
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent success, i.e. this and all future access()
    /// requests will succeed without being send to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param mask requested access mode
    pub access: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            mask: ::std::os::raw::c_int,
        ),
    >,
    /// Create and open a file
    ///
    /// If the file does not exist, first create it with the specified
    /// mode, and then open it.
    ///
    /// See the description of the open handler for more
    /// information.
    ///
    /// If this method is not implemented or under Linux kernel
    /// versions earlier than 2.6.15, the mknod() and open() methods
    /// will be called instead.
    ///
    /// If this request is answered with an error code of ENOSYS, the handler
    /// is treated as not implemented (i.e., for this and future requests the
    /// mknod() and open() handlers will be called instead).
    ///
    /// Valid replies:
    ///   fuse_reply_create
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param parent inode number of the parent directory
    /// @param name to create
    /// @param mode file type and mode with which to create the new file
    /// @param fi file information
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            parent: fuse_ino_t,
            name: *const ::std::os::raw::c_char,
            mode: mode_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Test for a POSIX file lock
    ///
    /// Valid replies:
    ///   fuse_reply_lock
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    /// @param lock the region/type to test
    pub getlk: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
            lock: *mut flock,
        ),
    >,
    /// Acquire, modify or release a POSIX file lock
    ///
    /// For POSIX threads (NPTL) there's a 1-1 relation between pid and
    /// owner, but otherwise this is not always the case.  For checking
    /// lock ownership, 'fi->owner' must be used.  The l_pid field in
    /// 'struct flock' should only be used to fill in this field in
    /// getlk().
    ///
    /// Note: if the locking methods are not implemented, the kernel
    /// will still allow file locking to work locally.  Hence these are
    /// only interesting for network filesystems and similar.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    /// @param lock the region/type to set
    /// @param sleep locking operation may sleep
    pub setlk: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
            lock: *mut flock,
            sleep: ::std::os::raw::c_int,
        ),
    >,
    /// Map block index within file to block index within device
    ///
    /// Note: This makes sense only for block device backed filesystems
    /// mounted with the 'blkdev' option
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent failure, i.e. all future bmap() requests will
    /// fail with the same error code without being send to the filesystem
    /// process.
    ///
    /// Valid replies:
    ///   fuse_reply_bmap
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param blocksize unit of block index
    /// @param idx block index within file
    pub bmap: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            blocksize: usize,
            idx: u64,
        ),
    >,
    /// Ioctl
    ///
    /// Note: For unrestricted ioctls (not allowed for FUSE
    /// servers), data in and out areas can be discovered by giving
    /// iovs and setting FUSE_IOCTL_RETRY in *flags*.  For
    /// restricted ioctls, kernel prepares in/out data area
    /// according to the information encoded in cmd.
    ///
    /// Valid replies:
    ///   fuse_reply_ioctl_retry
    ///   fuse_reply_ioctl
    ///   fuse_reply_ioctl_iov
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param cmd ioctl command
    /// @param arg ioctl argument
    /// @param fi file information
    /// @param flags for FUSE_IOCTL_* flags
    /// @param in_buf data fetched from the caller
    /// @param in_bufsz number of fetched bytes
    /// @param out_bufsz maximum size of output data
    ///
    /// Note : the unsigned long request submitted by the application
    /// is truncated to 32 bits.
    pub ioctl: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            cmd: ::std::os::raw::c_uint,
            arg: *mut ::std::os::raw::c_void,
            fi: *mut fuse_file_info,
            flags: ::std::os::raw::c_uint,
            in_buf: *const ::std::os::raw::c_void,
            in_bufsz: usize,
            out_bufsz: usize,
        ),
    >,
    /// Poll for IO readiness
    ///
    /// Note: If ph is non-NULL, the client should notify
    /// when IO readiness events occur by calling
    /// fuse_lowlevel_notify_poll() with the specified ph.
    ///
    /// Regardless of the number of times poll with a non-NULL ph
    /// is received, single notification is enough to clear all.
    /// Notifying more times incurs overhead but doesn't harm
    /// correctness.
    ///
    /// The callee is responsible for destroying ph with
    /// fuse_pollhandle_destroy() when no longer in use.
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as success (with a kernel-defined default poll-mask) and
    /// future calls to pull() will succeed the same way without being send
    /// to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_poll
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    /// @param ph poll handle to be used for notification
    pub poll: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
            ph: *mut fuse_pollhandle,
        ),
    >,
    /// Write data made available in a buffer
    ///
    /// This is a more generic version of the ->write() method.  If
    /// FUSE_CAP_SPLICE_READ is set in fuse_conn_info.want and the
    /// kernel supports splicing from the fuse device, then the
    /// data will be made available in pipe for supporting zero
    /// copy data transfer.
    ///
    /// buf->count is guaranteed to be one (and thus buf->idx is
    /// always zero). The write_buf handler must ensure that
    /// bufv->off is correctly updated (reflecting the number of
    /// bytes read from bufv->buf[0]).
    ///
    /// Unless FUSE_CAP_HANDLE_KILLPRIV is disabled, this method is
    /// expected to reset the setuid and setgid bits.
    ///
    /// Valid replies:
    ///   fuse_reply_write
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param bufv buffer containing the data
    /// @param off offset to write to
    /// @param fi file information
    pub write_buf: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            bufv: *mut fuse_bufvec,
            off: off_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Callback function for the retrieve request
    ///
    /// Valid replies:
    ///	fuse_reply_none
    ///
    /// @param req request handle
    /// @param cookie user data supplied to fuse_lowlevel_notify_retrieve()
    /// @param ino the inode number supplied to fuse_lowlevel_notify_retrieve()
    /// @param offset the offset supplied to fuse_lowlevel_notify_retrieve()
    /// @param bufv the buffer containing the returned data
    pub retrieve_reply: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            cookie: *mut ::std::os::raw::c_void,
            ino: fuse_ino_t,
            offset: off_t,
            bufv: *mut fuse_bufvec,
        ),
    >,
    /// Forget about multiple inodes
    ///
    /// See description of the forget function for more
    /// information.
    ///
    /// Valid replies:
    ///   fuse_reply_none
    ///
    /// @param req request handle
    pub forget_multi: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            count: usize,
            forgets: *mut fuse_forget_data,
        ),
    >,
    /// Acquire, modify or release a BSD file lock
    ///
    /// Note: if the locking methods are not implemented, the kernel
    /// will still allow file locking to work locally.  Hence these are
    /// only interesting for network filesystems and similar.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param fi file information
    /// @param op the locking operation, see flock(2)
    pub flock: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            fi: *mut fuse_file_info,
            op: ::std::os::raw::c_int,
        ),
    >,
    /// Allocate requested space. If this function returns success then
    /// subsequent writes to the specified range shall not fail due to the lack
    /// of free space on the file system storage media.
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent failure with error code EOPNOTSUPP, i.e. all
    /// future fallocate() requests will fail with EOPNOTSUPP without being
    /// send to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param offset starting point for allocated region
    /// @param length size of allocated region
    /// @param mode determines the operation to be performed on the given
    /// range,             see fallocate(2)
    pub fallocate: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            mode: ::std::os::raw::c_int,
            offset: off_t,
            length: off_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Read directory with attributes
    ///
    /// Send a buffer filled using fuse_add_direntry_plus(), with size not
    /// exceeding the requested size.  Send an empty buffer on end of
    /// stream.
    ///
    /// fi->fh will contain the value set by the opendir method, or
    /// will be undefined if the opendir method didn't set any value.
    ///
    /// In contrast to readdir() (which does not affect the lookup counts),
    /// the lookup count of every entry returned by readdirplus(), except "."
    /// and "..", is incremented by one.
    ///
    /// Valid replies:
    ///   fuse_reply_buf
    ///   fuse_reply_data
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino the inode number
    /// @param size maximum number of bytes to send
    /// @param off offset to continue reading the directory stream
    /// @param fi file information
    pub readdirplus: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino: fuse_ino_t,
            size: usize,
            off: off_t,
            fi: *mut fuse_file_info,
        ),
    >,
    /// Copy a range of data from one file to another
    ///
    /// Performs an optimized copy between two file descriptors without the
    /// additional cost of transferring data through the FUSE kernel module
    /// to user space (glibc) and then back into the FUSE filesystem again.
    ///
    /// In case this method is not implemented, glibc falls back to reading
    /// data from the source and writing to the destination. Effectively
    /// doing an inefficient copy of the data.
    ///
    /// If this request is answered with an error code of ENOSYS, this is
    /// treated as a permanent failure with error code EOPNOTSUPP, i.e. all
    /// future copy_file_range() requests will fail with EOPNOTSUPP without
    /// being send to the filesystem process.
    ///
    /// Valid replies:
    ///   fuse_reply_write
    ///   fuse_reply_err
    ///
    /// @param req request handle
    /// @param ino_in the inode number or the source file
    /// @param off_in starting point from were the data should be read
    /// @param fi_in file information of the source file
    /// @param ino_out the inode number or the destination file
    /// @param off_out starting point where the data should be written
    /// @param fi_out file information of the destination file
    /// @param len maximum size of the data to copy
    /// @param flags passed along with the copy_file_range() syscall
    pub copy_file_range: ::std::option::Option<
        unsafe extern "C" fn(
            req: fuse_req_t,
            ino_in: fuse_ino_t,
            off_in: off_t,
            fi_in: *mut fuse_file_info,
            ino_out: fuse_ino_t,
            off_out: off_t,
            fi_out: *mut fuse_file_info,
            len: usize,
            flags: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_fuse_lowlevel_ops() {
    assert_eq!(
        ::std::mem::size_of::<fuse_lowlevel_ops>(),
        344usize,
        concat!("Size of: ", stringify!(fuse_lowlevel_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_lowlevel_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_lowlevel_ops))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).init as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).destroy as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).lookup as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(lookup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).forget as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(forget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).getattr as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(getattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).setattr as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(setattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).readlink as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(readlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).mknod as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).mkdir as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).unlink as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).rmdir as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).symlink as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).rename as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).link as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).open as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).read as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).write as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).flush as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).release as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).fsync as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(fsync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).opendir as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(opendir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).readdir as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(readdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).releasedir as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(releasedir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).fsyncdir as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(fsyncdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).statfs as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(statfs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).setxattr as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(setxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).getxattr as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(getxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).listxattr as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(listxattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).removexattr
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(removexattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).access as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).create as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).getlk as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(getlk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).setlk as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(setlk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).bmap as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(bmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).ioctl as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(ioctl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).poll as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(poll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).write_buf as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(write_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).retrieve_reply
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(retrieve_reply)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).forget_multi
                as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(forget_multi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).flock as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(flock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).fallocate as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(fallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).readdirplus
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(readdirplus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_lowlevel_ops>())).copy_file_range
                as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lowlevel_ops),
            "::",
            stringify!(copy_file_range)
        )
    );
}
extern "C" {
    /// Reply with an error code or success.
    ///
    /// Possible requests:
    ///   all except forget
    ///
    /// Whereever possible, error codes should be chosen from the list of
    /// documented error conditions in the corresponding system calls
    /// manpage.
    ///
    /// An error code of ENOSYS is sometimes treated specially. This is
    /// indicated in the documentation of the affected handler functions.
    ///
    /// The following requests may be answered with a zero error code:
    /// unlink, rmdir, rename, flush, release, fsync, fsyncdir, setxattr,
    /// removexattr, setlk.
    ///
    /// @param req request handle
    /// @param err the positive error value, or zero for success
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_err(
        req: fuse_req_t,
        err: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Don't send reply
    ///
    /// Possible requests:
    ///   forget
    ///   forget_multi
    ///   retrieve_reply
    ///
    /// @param req request handle
    pub fn fuse_reply_none(req: fuse_req_t);
}
extern "C" {
    /// Reply with a directory entry
    ///
    /// Possible requests:
    ///   lookup, mknod, mkdir, symlink, link
    ///
    /// Side effects:
    ///   increments the lookup count on success
    ///
    /// @param req request handle
    /// @param e the entry parameters
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_entry(
        req: fuse_req_t,
        e: *const fuse_entry_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with a directory entry and open parameters
    ///
    /// currently the following members of 'fi' are used:
    ///   fh, direct_io, keep_cache
    ///
    /// Possible requests:
    ///   create
    ///
    /// Side effects:
    ///   increments the lookup count on success
    ///
    /// @param req request handle
    /// @param e the entry parameters
    /// @param fi file information
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_create(
        req: fuse_req_t,
        e: *const fuse_entry_param,
        fi: *const fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with attributes
    ///
    /// Possible requests:
    ///   getattr, setattr
    ///
    /// @param req request handle
    /// @param attr the attributes
    /// @param attr_timeout	validity timeout (in seconds) for the attributes
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_attr(
        req: fuse_req_t,
        attr: *const stat,
        attr_timeout: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with the contents of a symbolic link
    ///
    /// Possible requests:
    ///   readlink
    ///
    /// @param req request handle
    /// @param link symbolic link contents
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_readlink(
        req: fuse_req_t,
        link: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with open parameters
    ///
    /// currently the following members of 'fi' are used:
    ///   fh, direct_io, keep_cache
    ///
    /// Possible requests:
    ///   open, opendir
    ///
    /// @param req request handle
    /// @param fi file information
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_open(
        req: fuse_req_t,
        fi: *const fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with number of bytes written
    ///
    /// Possible requests:
    ///   write
    ///
    /// @param req request handle
    /// @param count the number of bytes written
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_write(
        req: fuse_req_t,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with data
    ///
    /// Possible requests:
    ///   read, readdir, getxattr, listxattr
    ///
    /// @param req request handle
    /// @param buf buffer containing data
    /// @param size the size of data in bytes
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_buf(
        req: fuse_req_t,
        buf: *const ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with data copied/moved from buffer(s)
    ///
    /// Zero copy data transfer ("splicing") will be used under
    /// the following circumstances:
    ///
    /// 1. FUSE_CAP_SPLICE_WRITE is set in fuse_conn_info.want, and
    /// 2. the kernel supports splicing from the fuse device
    ///    (FUSE_CAP_SPLICE_WRITE is set in fuse_conn_info.capable), and
    /// 3. *flags* does not contain FUSE_BUF_NO_SPLICE
    /// 4. The amount of data that is provided in file-descriptor backed
    ///    buffers (i.e., buffers for which bufv[n].flags == FUSE_BUF_FD)
    ///    is at least twice the page size.
    ///
    /// In order for SPLICE_F_MOVE to be used, the following additional
    /// conditions have to be fulfilled:
    ///
    /// 1. FUSE_CAP_SPLICE_MOVE is set in fuse_conn_info.want, and
    /// 2. the kernel supports it (i.e, FUSE_CAP_SPLICE_MOVE is set in
    ///fuse_conn_info.capable), and
    /// 3. *flags* contains FUSE_BUF_SPLICE_MOVE
    ///
    /// Note that, if splice is used, the data is actually spliced twice:
    /// once into a temporary pipe (to prepend header data), and then again
    /// into the kernel. If some of the provided buffers are memory-backed,
    /// the data in them is copied in step one and spliced in step two.
    ///
    /// The FUSE_BUF_SPLICE_FORCE_SPLICE and FUSE_BUF_SPLICE_NONBLOCK flags
    /// are silently ignored.
    ///
    /// Possible requests:
    ///   read, readdir, getxattr, listxattr
    ///
    /// Side effects:
    ///   when used to return data from a readdirplus() (but not readdir())
    ///   call, increments the lookup count of each returned entry by one
    ///   on success.
    ///
    /// @param req request handle
    /// @param bufv buffer vector
    /// @param flags flags controlling the copy
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_data(
        req: fuse_req_t,
        bufv: *mut fuse_bufvec,
        flags: fuse_buf_copy_flags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with data vector
    ///
    /// Possible requests:
    ///   read, readdir, getxattr, listxattr
    ///
    /// @param req request handle
    /// @param iov the vector containing the data
    /// @param count the size of vector
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_iov(
        req: fuse_req_t,
        iov: *const iovec,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with filesystem statistics
    ///
    /// Possible requests:
    ///   statfs
    ///
    /// @param req request handle
    /// @param stbuf filesystem statistics
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_statfs(
        req: fuse_req_t,
        stbuf: *const statvfs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with needed buffer size
    ///
    /// Possible requests:
    ///   getxattr, listxattr
    ///
    /// @param req request handle
    /// @param count the buffer size needed in bytes
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_xattr(
        req: fuse_req_t,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with file lock information
    ///
    /// Possible requests:
    ///   getlk
    ///
    /// @param req request handle
    /// @param lock the lock information
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_lock(
        req: fuse_req_t,
        lock: *const flock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with block index
    ///
    /// Possible requests:
    ///   bmap
    ///
    /// @param req request handle
    /// @param idx block index within device
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_bmap(req: fuse_req_t, idx: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Add a directory entry to the buffer
    ///
    /// Buffer needs to be large enough to hold the entry.  If it's not,
    /// then the entry is not filled in but the size of the entry is still
    /// returned.  The caller can check this by comparing the bufsize
    /// parameter with the returned entry size.  If the entry size is
    /// larger than the buffer size, the operation failed.
    ///
    /// From the 'stbuf' argument the st_ino field and bits 12-15 of the
    /// st_mode field are used.  The other fields are ignored.
    ///
    /// *off* should be any non-zero value that the filesystem can use to
    /// identify the current point in the directory stream. It does not
    /// need to be the actual physical position. A value of zero is
    /// reserved to mean "from the beginning", and should therefore never
    /// be used (the first call to fuse_add_direntry should be passed the
    /// offset of the second directory entry).
    ///
    /// @param req request handle
    /// @param buf the point where the new entry will be added to the buffer
    /// @param bufsize remaining size of the buffer
    /// @param name the name of the entry
    /// @param stbuf the file attributes
    /// @param off the offset of the next entry
    /// @return the space needed for the entry
    pub fn fuse_add_direntry(
        req: fuse_req_t,
        buf: *mut ::std::os::raw::c_char,
        bufsize: usize,
        name: *const ::std::os::raw::c_char,
        stbuf: *const stat,
        off: off_t,
    ) -> usize;
}
extern "C" {
    /// Add a directory entry to the buffer with the attributes
    ///
    /// See documentation of `fuse_add_direntry()` for more details.
    ///
    /// @param req request handle
    /// @param buf the point where the new entry will be added to the buffer
    /// @param bufsize remaining size of the buffer
    /// @param name the name of the entry
    /// @param e the directory entry
    /// @param off the offset of the next entry
    /// @return the space needed for the entry
    pub fn fuse_add_direntry_plus(
        req: fuse_req_t,
        buf: *mut ::std::os::raw::c_char,
        bufsize: usize,
        name: *const ::std::os::raw::c_char,
        e: *const fuse_entry_param,
        off: off_t,
    ) -> usize;
}
extern "C" {
    /// Reply to ask for data fetch and output buffer preparation.  ioctl
    /// will be retried with the specified input data fetched and output
    /// buffer prepared.
    ///
    /// Possible requests:
    ///   ioctl
    ///
    /// @param req request handle
    /// @param in_iov iovec specifying data to fetch from the caller
    /// @param in_count number of entries in in_iov
    /// @param out_iov iovec specifying addresses to write output to
    /// @param out_count number of entries in out_iov
    /// @return zero for success, -errno for failure to send reply
    pub fn fuse_reply_ioctl_retry(
        req: fuse_req_t,
        in_iov: *const iovec,
        in_count: usize,
        out_iov: *const iovec,
        out_count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply to finish ioctl
    ///
    /// Possible requests:
    ///   ioctl
    ///
    /// @param req request handle
    /// @param result result to be passed to the caller
    /// @param buf buffer containing output data
    /// @param size length of output data
    pub fn fuse_reply_ioctl(
        req: fuse_req_t,
        result: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply to finish ioctl with iov buffer
    ///
    /// Possible requests:
    ///   ioctl
    ///
    /// @param req request handle
    /// @param result result to be passed to the caller
    /// @param iov the vector containing the data
    /// @param count the size of vector
    pub fn fuse_reply_ioctl_iov(
        req: fuse_req_t,
        result: ::std::os::raw::c_int,
        iov: *const iovec,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Reply with poll result event mask
    ///
    /// @param req request handle
    /// @param revents poll result event mask
    pub fn fuse_reply_poll(
        req: fuse_req_t,
        revents: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Notify IO readiness event
    ///
    /// For more information, please read comment for poll operation.
    ///
    /// @param ph poll handle to notify IO readiness event for
    pub fn fuse_lowlevel_notify_poll(
        ph: *mut fuse_pollhandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Notify to invalidate cache for an inode.
    ///
    /// Added in FUSE protocol version 7.12. If the kernel does not support
    /// this (or a newer) version, the function will return -ENOSYS and do
    /// nothing.
    ///
    /// If the filesystem has writeback caching enabled, invalidating an
    /// inode will first trigger a writeback of all dirty pages. The call
    /// will block until all writeback requests have completed and the
    /// inode has been invalidated. It will, however, not wait for
    /// completion of pending writeback requests that have been issued
    /// before.
    ///
    /// If there are no dirty pages, this function will never block.
    ///
    /// @param se the session object
    /// @param ino the inode number
    /// @param off the offset in the inode where to start invalidating
    ///            or negative to invalidate attributes only
    /// @param len the amount of cache to invalidate or 0 for all
    /// @return zero for success, -errno for failure
    pub fn fuse_lowlevel_notify_inval_inode(
        se: *mut fuse_session,
        ino: fuse_ino_t,
        off: off_t,
        len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Notify to invalidate parent attributes and the dentry matching
    /// parent/name
    ///
    /// To avoid a deadlock this function must not be called in the
    /// execution path of a related filesytem operation or within any code
    /// that could hold a lock that could be needed to execute such an
    /// operation. As of kernel 4.18, a "related operation" is a lookup(),
    /// symlink(), mknod(), mkdir(), unlink(), rename(), link() or create()
    /// request for the parent, and a setattr(), unlink(), rmdir(),
    /// rename(), setxattr(), removexattr(), readdir() or readdirplus()
    /// request for the inode itself.
    ///
    /// When called correctly, this function will never block.
    ///
    /// Added in FUSE protocol version 7.12. If the kernel does not support
    /// this (or a newer) version, the function will return -ENOSYS and do
    /// nothing.
    ///
    /// @param se the session object
    /// @param parent inode number
    /// @param name file name
    /// @param namelen strlen() of file name
    /// @return zero for success, -errno for failure
    pub fn fuse_lowlevel_notify_inval_entry(
        se: *mut fuse_session,
        parent: fuse_ino_t,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// This function behaves like fuse_lowlevel_notify_inval_entry() with
    /// the following additional effect (at least as of Linux kernel 4.8):
    ///
    /// If the provided *child* inode matches the inode that is currently
    /// associated with the cached dentry, and if there are any inotify
    /// watches registered for the dentry, then the watchers are informed
    /// that the dentry has been deleted.
    ///
    /// To avoid a deadlock this function must not be called while
    /// executing a related filesytem operation or while holding a lock
    /// that could be needed to execute such an operation (see the
    /// description of fuse_lowlevel_notify_inval_entry() for more
    /// details).
    ///
    /// When called correctly, this function will never block.
    ///
    /// Added in FUSE protocol version 7.18. If the kernel does not support
    /// this (or a newer) version, the function will return -ENOSYS and do
    /// nothing.
    ///
    /// @param se the session object
    /// @param parent inode number
    /// @param child inode number
    /// @param name file name
    /// @param namelen strlen() of file name
    /// @return zero for success, -errno for failure
    pub fn fuse_lowlevel_notify_delete(
        se: *mut fuse_session,
        parent: fuse_ino_t,
        child: fuse_ino_t,
        name: *const ::std::os::raw::c_char,
        namelen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Store data to the kernel buffers
    ///
    /// Synchronously store data in the kernel buffers belonging to the
    /// given inode.  The stored data is marked up-to-date (no read will be
    /// performed against it, unless it's invalidated or evicted from the
    /// cache).
    ///
    /// If the stored data overflows the current file size, then the size
    /// is extended, similarly to a write(2) on the filesystem.
    ///
    /// If this function returns an error, then the store wasn't fully
    /// completed, but it may have been partially completed.
    ///
    /// Added in FUSE protocol version 7.15. If the kernel does not support
    /// this (or a newer) version, the function will return -ENOSYS and do
    /// nothing.
    ///
    /// @param se the session object
    /// @param ino the inode number
    /// @param offset the starting offset into the file to store to
    /// @param bufv buffer vector
    /// @param flags flags controlling the copy
    /// @return zero for success, -errno for failure
    pub fn fuse_lowlevel_notify_store(
        se: *mut fuse_session,
        ino: fuse_ino_t,
        offset: off_t,
        bufv: *mut fuse_bufvec,
        flags: fuse_buf_copy_flags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Retrieve data from the kernel buffers
    ///
    /// Retrieve data in the kernel buffers belonging to the given inode.
    /// If successful then the retrieve_reply() method will be called with
    /// the returned data.
    ///
    /// Only present pages are returned in the retrieve reply.  Retrieving
    /// stops when it finds a non-present page and only data prior to that
    /// is returned.
    ///
    /// If this function returns an error, then the retrieve will not be
    /// completed and no reply will be sent.
    ///
    /// This function doesn't change the dirty state of pages in the kernel
    /// buffer.  For dirty pages the write() method will be called
    /// regardless of having been retrieved previously.
    ///
    /// Added in FUSE protocol version 7.15. If the kernel does not support
    /// this (or a newer) version, the function will return -ENOSYS and do
    /// nothing.
    ///
    /// @param se the session object
    /// @param ino the inode number
    /// @param size the number of bytes to retrieve
    /// @param offset the starting offset into the file to retrieve from
    /// @param cookie user data to supply to the reply callback
    /// @return zero for success, -errno for failure
    pub fn fuse_lowlevel_notify_retrieve(
        se: *mut fuse_session,
        ino: fuse_ino_t,
        size: usize,
        offset: off_t,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Get the userdata from the request
    ///
    /// @param req request handle
    /// @return the user data passed to fuse_session_new()
    pub fn fuse_req_userdata(req: fuse_req_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// Get the context from the request
    ///
    /// The pointer returned by this function will only be valid for the
    /// request's lifetime
    ///
    /// @param req request handle
    /// @return the context structure
    pub fn fuse_req_ctx(req: fuse_req_t) -> *const fuse_ctx;
}
extern "C" {
    /// Get the current supplementary group IDs for the specified request
    ///
    /// Similar to the getgroups(2) system call, except the return value is
    /// always the total number of group IDs, even if it is larger than the
    /// specified size.
    ///
    /// The current fuse kernel module in linux (as of 2.6.30) doesn't pass
    /// the group list to userspace, hence this function needs to parse
    /// "/proc/$TID/task/$TID/status" to get the group IDs.
    ///
    /// This feature may not be supported on all operating systems.  In
    /// such a case this function will return -ENOSYS.
    ///
    /// @param req request handle
    /// @param size size of given array
    /// @param list array of group IDs to be filled in
    /// @return the total number of supplementary group IDs or -errno on failure
    pub fn fuse_req_getgroups(
        req: fuse_req_t,
        size: ::std::os::raw::c_int,
        list: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
/// Callback function for an interrupt
///
/// @param req interrupted request
/// @param data user data
pub type fuse_interrupt_func_t = ::std::option::Option<
    unsafe extern "C" fn(req: fuse_req_t, data: *mut ::std::os::raw::c_void),
>;
extern "C" {
    /// Register/unregister callback for an interrupt
    ///
    /// If an interrupt has already happened, then the callback function is
    /// called from within this function, hence it's not possible for
    /// interrupts to be lost.
    ///
    /// @param req request handle
    /// @param func the callback function or NULL for unregister
    /// @param data user data passed to the callback function
    pub fn fuse_req_interrupt_func(
        req: fuse_req_t,
        func: fuse_interrupt_func_t,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    /// Check if a request has already been interrupted
    ///
    /// @param req request handle
    /// @return 1 if the request has been interrupted, 0 otherwise
    pub fn fuse_req_interrupted(req: fuse_req_t) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Print low-level version information to stdout.
    pub fn fuse_lowlevel_version();
}
extern "C" {
    /// Print available low-level options to stdout. This is not an
    /// exhaustive list, but includes only those options that may be of
    /// interest to an end-user of a file system.
    pub fn fuse_lowlevel_help();
}
extern "C" {
    /// Print available options for `fuse_parse_cmdline()`.
    pub fn fuse_cmdline_help();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_cmdline_opts {
    pub singlethread: ::std::os::raw::c_int,
    pub foreground: ::std::os::raw::c_int,
    pub debug: ::std::os::raw::c_int,
    pub nodefault_subtype: ::std::os::raw::c_int,
    pub mountpoint: *mut ::std::os::raw::c_char,
    pub show_version: ::std::os::raw::c_int,
    pub show_help: ::std::os::raw::c_int,
    pub clone_fd: ::std::os::raw::c_int,
    pub max_idle_threads: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_fuse_cmdline_opts() {
    assert_eq!(
        ::std::mem::size_of::<fuse_cmdline_opts>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_cmdline_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_cmdline_opts>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_cmdline_opts))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).singlethread
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(singlethread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).foreground as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(foreground)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).debug as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).nodefault_subtype
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(nodefault_subtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).mountpoint as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(mountpoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).show_version
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(show_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).show_help as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(show_help)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).clone_fd as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(clone_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_cmdline_opts>())).max_idle_threads
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_cmdline_opts),
            "::",
            stringify!(max_idle_threads)
        )
    );
}
extern "C" {
    /// Utility function to parse common options for simple file systems
    /// using the low-level API. A help text that describes the available
    /// options can be printed with `fuse_cmdline_help`. A single
    /// non-option argument is treated as the mountpoint. Multiple
    /// non-option arguments will result in an error.
    ///
    /// If neither -o subtype= or -o fsname= options are given, a new
    /// subtype option will be added and set to the basename of the program
    /// (the fsname will remain unset, and then defaults to "fuse").
    ///
    /// Known options will be removed from *args*, unknown options will
    /// remain.
    ///
    /// @param args argument vector (input+output)
    /// @param opts output argument for parsed options
    /// @return 0 on success, -1 on failure
    pub fn fuse_parse_cmdline(
        args: *mut fuse_args,
        opts: *mut fuse_cmdline_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Create a low level session.
    ///
    /// Returns a session structure suitable for passing to
    /// fuse_session_mount() and fuse_session_loop().
    ///
    /// This function accepts most file-system independent mount options
    /// (like context, nodev, ro - see mount(8)), as well as the general
    /// fuse mount options listed in mount.fuse(8) (e.g. -o allow_root and
    /// -o default_permissions, but not ``-o use_ino``).  Instead of `-o
    /// debug`, debugging may also enabled with `-d` or `--debug`.
    ///
    /// If not all options are known, an error message is written to stderr
    /// and the function returns NULL.
    ///
    /// Option parsing skips argv[0], which is assumed to contain the
    /// program name. To prevent accidentally passing an option in
    /// argv[0], this element must always be present (even if no options
    /// are specified). It may be set to the empty string ('\0') if no
    /// reasonable value can be provided.
    ///
    /// @param args argument vector
    /// @param op the (low-level) filesystem operations
    /// @param op_size sizeof(struct fuse_lowlevel_ops)
    /// @param userdata user data
    ///
    /// @return the fuse session on success, NULL on failure
    pub fn fuse_session_new(
        args: *mut fuse_args,
        op: *const fuse_lowlevel_ops,
        op_size: usize,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut fuse_session;
}
extern "C" {
    /// Mount a FUSE file system.
    ///
    /// @param mountpoint the mount point path
    /// @param se session object
    ///
    /// @return 0 on success, -1 on failure.
    pub fn fuse_session_mount(
        se: *mut fuse_session,
        mountpoint: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Enter a single threaded, blocking event loop.
    ///
    /// When the event loop terminates because the connection to the FUSE
    /// kernel module has been closed, this function returns zero. This
    /// happens when the filesystem is unmounted regularly (by the
    /// filesystem owner or root running the umount(8) or fusermount(1)
    /// command), or if connection is explicitly severed by writing ``1``
    /// to the``abort`` file in ``/sys/fs/fuse/connections/NNN``. The only
    /// way to distinguish between these two conditions is to check if the
    /// filesystem is still mounted after the session loop returns.
    ///
    /// When some error occurs during request processing, the function
    /// returns a negated errno(3) value.
    ///
    /// If the loop has been terminated because of a signal handler
    /// installed by fuse_set_signal_handlers(), this function returns the
    /// (positive) signal value that triggered the exit.
    ///
    /// @param se the session
    /// @return 0, -errno, or a signal value
    pub fn fuse_session_loop(se: *mut fuse_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_session_loop_mt(
        se: *mut fuse_session,
        config: *mut fuse_loop_config,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Flag a session as terminated.
    ///
    /// This function is invoked by the POSIX signal handlers, when
    /// registered using fuse_set_signal_handlers(). It will cause any
    /// running event loops to terminate on the next opportunity.
    ///
    /// @param se the session
    pub fn fuse_session_exit(se: *mut fuse_session);
}
extern "C" {
    /// Reset the terminated flag of a session
    ///
    /// @param se the session
    pub fn fuse_session_reset(se: *mut fuse_session);
}
extern "C" {
    /// Query the terminated flag of a session
    ///
    /// @param se the session
    /// @return 1 if exited, 0 if not exited
    pub fn fuse_session_exited(se: *mut fuse_session) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Ensure that file system is unmounted.
    ///
    /// In regular operation, the file system is typically unmounted by the
    /// user calling umount(8) or fusermount(1), which then terminates the
    /// FUSE session loop. However, the session loop may also terminate as
    /// a result of an explicit call to fuse_session_exit() (e.g. by a
    /// signal handler installed by fuse_set_signal_handler()). In this
    /// case the filesystem remains mounted, but any attempt to access it
    /// will block (while the filesystem process is still running) or give
    /// an ESHUTDOWN error (after the filesystem process has terminated).
    ///
    /// If the communication channel with the FUSE kernel module is still
    /// open (i.e., if the session loop was terminated by an explicit call
    /// to fuse_session_exit()), this function will close it and unmount
    /// the filesystem. If the communication channel has been closed by the
    /// kernel, this method will do (almost) nothing.
    ///
    /// NOTE: The above semantics mean that if the connection to the kernel
    /// is terminated via the ``/sys/fs/fuse/connections/NNN/abort`` file,
    /// this method will *not* unmount the filesystem.
    ///
    /// @param se the session
    pub fn fuse_session_unmount(se: *mut fuse_session);
}
extern "C" {
    /// Destroy a session
    ///
    /// @param se the session
    pub fn fuse_session_destroy(se: *mut fuse_session);
}
extern "C" {
    /// Return file descriptor for communication with kernel.
    ///
    /// The file selector can be used to integrate FUSE with a custom event
    /// loop. Whenever data is available for reading on the provided fd,
    /// the event loop should call `fuse_session_receive_buf` followed by
    /// `fuse_session_process_buf` to process the request.
    ///
    /// The returned file descriptor is valid until `fuse_session_unmount`
    /// is called.
    ///
    /// @param se the session
    /// @return a file descriptor
    pub fn fuse_session_fd(se: *mut fuse_session) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Process a raw request supplied in a generic buffer
    ///
    /// The fuse_buf may contain a memory buffer or a pipe file descriptor.
    ///
    /// @param se the session
    /// @param buf the fuse_buf containing the request
    pub fn fuse_session_process_buf(
        se: *mut fuse_session,
        buf: *const fuse_buf,
    );
}
extern "C" {
    /// Read a raw request from the kernel into the supplied buffer.
    ///
    /// Depending on file system options, system capabilities, and request
    /// size the request is either read into a memory buffer or spliced
    /// into a temporary pipe.
    ///
    /// @param se the session
    /// @param buf the fuse_buf to store the request in
    /// @return the actual size of the raw request, or -errno on error
    pub fn fuse_session_receive_buf(
        se: *mut fuse_session,
        buf: *mut fuse_buf,
    ) -> ::std::os::raw::c_int;
}
